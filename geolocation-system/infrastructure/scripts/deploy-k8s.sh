#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ Kubernetes

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v kubectl &> /dev/null; then
        error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v helm &> /dev/null; then
        warn "Helm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ Helm"
    fi
    
    log "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
check_cluster() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Kubernetes..."
    
    if ! kubectl cluster-info &> /dev/null; then
        error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
    fi
    
    local nodes=$(kubectl get nodes --no-headers | wc -l)
    log "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —É–∑–ª–æ–≤: $nodes"
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -f "docker-compose.yml" ]; then
        error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    fi
    
    # Frontend
    log "üì¶ –°–±–æ—Ä–∫–∞ frontend..."
    docker build -t geolocation/frontend:latest ./frontend/
    
    # Backend services
    for service in api-gateway auth-service image-service coordinates-service export-service notification-service; do
        log "üì¶ –°–±–æ—Ä–∫–∞ $service..."
        docker build -t geolocation/$service:latest ./backend/$service/
    done
    
    log "‚úÖ –í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
}

# –°–æ–∑–¥–∞–Ω–∏–µ namespace
create_namespace() {
    log "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ namespace..."
    
    kubectl create namespace geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    log "‚úÖ Namespace —Å–æ–∑–¥–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
create_secrets() {
    log "üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    
    # PostgreSQL secret
    kubectl create secret generic postgres-secret \
        --from-literal=password=your-secure-password \
        --namespace=geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    
    # JWT secret
    kubectl create secret generic jwt-secret \
        --from-literal=secret-key=your-jwt-secret-key \
        --namespace=geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    
    # Google API secret
    kubectl create secret generic google-api-secret \
        --from-literal=api-key=your-google-api-key \
        --namespace=geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    
    # MinIO secret
    kubectl create secret generic minio-secret \
        --from-literal=access-key=minioadmin \
        --from-literal=secret-key=minioadmin \
        --namespace=geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    
    log "‚úÖ –°–µ–∫—Ä–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ ConfigMap
create_configmap() {
    log "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ConfigMap..."
    
    kubectl create configmap app-config \
        --from-literal=database-url=postgresql://postgres:password@postgres-service:5432/geolocation_db \
        --from-literal=redis-url=redis://redis-service:6379 \
        --from-literal=minio-endpoint=minio-service:9000 \
        --from-literal=auth-service-url=http://auth-service:8000 \
        --from-literal=image-service-url=http://image-service:8000 \
        --from-literal=neural-service-url=http://neural-service:8000 \
        --from-literal=coordinates-service-url=http://coordinates-service:8000 \
        --from-literal=export-service-url=http://export-service:8000 \
        --from-literal=notification-service-url=http://notification-service:8000 \
        --namespace=geolocation-system --dry-run=client -o yaml | kubectl apply -f -
    
    log "‚úÖ ConfigMap —Å–æ–∑–¥–∞–Ω"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PersistentVolumes
apply_persistent_volumes() {
    log "üíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PersistentVolumes..."
    
    kubectl apply -f infrastructure/kubernetes/persistent-volumes.yaml
    log "‚úÖ PersistentVolumes –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
deploy_databases() {
    log "üóÑÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # PostgreSQL
    kubectl apply -f infrastructure/kubernetes/postgres.yaml
    log "‚úÖ PostgreSQL —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Redis
    kubectl apply -f infrastructure/kubernetes/redis.yaml
    log "‚úÖ Redis —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # MinIO
    kubectl apply -f infrastructure/kubernetes/minio.yaml
    log "‚úÖ MinIO —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
wait_for_databases() {
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
    
    # PostgreSQL
    kubectl wait --for=condition=ready pod -l app=postgres -n geolocation-system --timeout=300s
    log "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
    
    # Redis
    kubectl wait --for=condition=ready pod -l app=redis -n geolocation-system --timeout=300s
    log "‚úÖ Redis –≥–æ—Ç–æ–≤"
    
    # MinIO
    kubectl wait --for=condition=ready pod -l app=minio -n geolocation-system --timeout=300s
    log "‚úÖ MinIO –≥–æ—Ç–æ–≤"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
deploy_services() {
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Auth Service
    kubectl apply -f infrastructure/kubernetes/auth-service.yaml
    log "‚úÖ Auth Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Neural Service (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
    # kubectl apply -f infrastructure/kubernetes/neural-service.yaml
    # log "‚úÖ Neural Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Image Service
    kubectl apply -f infrastructure/kubernetes/image-service.yaml
    log "‚úÖ Image Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Coordinates Service
    kubectl apply -f infrastructure/kubernetes/coordinates-service.yaml
    log "‚úÖ Coordinates Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Export Service
    kubectl apply -f infrastructure/kubernetes/export-service.yaml
    log "‚úÖ Export Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Notification Service
    kubectl apply -f infrastructure/kubernetes/notification-service.yaml
    log "‚úÖ Notification Service —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # API Gateway
    kubectl apply -f infrastructure/kubernetes/api-gateway.yaml
    log "‚úÖ API Gateway —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # Frontend
    kubectl apply -f infrastructure/kubernetes/frontend.yaml
    log "‚úÖ Frontend —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress
setup_ingress() {
    log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ingress..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è NGINX Ingress Controller
    if kubectl get pods -n ingress-nginx &> /dev/null; then
        log "‚úÖ NGINX Ingress Controller —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        warn "NGINX Ingress Controller –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        
        if command -v helm &> /dev/null; then
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm install ingress-nginx ingress-nginx/ingress-nginx \
                --namespace ingress-nginx \
                --create-namespace \
                --set controller.service.type=LoadBalancer
        else
            warn "Helm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Ingress Controller"
        fi
    fi
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Ingress
    kubectl apply -f infrastructure/kubernetes/ingress.yaml
    log "‚úÖ Ingress –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    log "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    if command -v helm &> /dev/null; then
        # Prometheus
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        
        if ! helm list -n monitoring &> /dev/null; then
            helm install prometheus prometheus-community/kube-prometheus-stack \
                --namespace monitoring \
                --create-namespace \
                --set grafana.adminPassword=admin
            log "‚úÖ Prometheus –∏ Grafana —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            log "‚úÖ Prometheus —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    else
        warn "Helm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HPA
setup_hpa() {
    log "üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HPA..."
    
    kubectl apply -f infrastructure/kubernetes/hpa.yaml
    log "‚úÖ HPA –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤
    kubectl get pods -n geolocation-system
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    kubectl get services -n geolocation-system
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress
    kubectl get ingress -n geolocation-system
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HPA
    kubectl get hpa -n geolocation-system
    
    log "‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS –¥–ª—è Minikube
setup_dns() {
    if kubectl config current-context | grep -q minikube; then
        log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS –¥–ª—è Minikube..."
        
        local minikube_ip=$(minikube ip)
        local hosts_entry="$minikube_ip geolocation.local api.geolocation.local"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            # Windows
            echo "$hosts_entry" >> C:\\Windows\\System32\\drivers\\etc\\hosts
        else
            # Linux/macOS
            echo "$hosts_entry" | sudo tee -a /etc/hosts
        fi
        
        log "‚úÖ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $hosts_entry"
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    log "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    info "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
    echo ""
    echo "üåê Frontend: http://geolocation.local"
    echo "üîó API: http://api.geolocation.local"
    echo "üìä Grafana: http://localhost:3000 (admin/admin)"
    echo ""
    info "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo ""
    echo "kubectl get pods -n geolocation-system"
    echo "kubectl logs -f deployment/api-gateway -n geolocation-system"
    echo "kubectl port-forward service/frontend 3000:3000 -n geolocation-system"
    echo "kubectl port-forward service/api-gateway 8000:8000 -n geolocation-system"
    echo ""
    info "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    echo ""
    echo "kubectl delete namespace geolocation-system"
    echo ""
}

# –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
cleanup() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    kubectl delete namespace geolocation-system
    log "‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-deploy}" in
        "deploy")
            check_dependencies
            check_cluster
            build_images
            create_namespace
            create_secrets
            create_configmap
            apply_persistent_volumes
            deploy_databases
            wait_for_databases
            deploy_services
            setup_ingress
            setup_monitoring
            setup_hpa
            setup_dns
            check_status
            show_access_info
            ;;
        "cleanup")
            cleanup
            ;;
        "status")
            check_status
            ;;
        "build")
            build_images
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {deploy|cleanup|status|build}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  deploy   - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
            echo "  cleanup  - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
            echo "  status   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
            echo "  build    - –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
